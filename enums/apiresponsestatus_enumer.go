// Code generated by "enumer -type=APIResponseStatus -json enums"; DO NOT EDIT

package enums

import (
	"encoding/json"
	"fmt"
)

const _APIResponseStatusName = "SuccessError"

var _APIResponseStatusIndex = [...]uint8{0, 7, 12}

func (i APIResponseStatus) String() string {
	if i < 0 || i >= APIResponseStatus(len(_APIResponseStatusIndex)-1) {
		return fmt.Sprintf("APIResponseStatus(%d)", i)
	}
	return _APIResponseStatusName[_APIResponseStatusIndex[i]:_APIResponseStatusIndex[i+1]]
}

var _APIResponseStatusValues = []APIResponseStatus{0, 1}

var _APIResponseStatusNameToValueMap = map[string]APIResponseStatus{
	_APIResponseStatusName[0:7]:  0,
	_APIResponseStatusName[7:12]: 1,
}

// APIResponseStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func APIResponseStatusString(s string) (APIResponseStatus, error) {
	if val, ok := _APIResponseStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to APIResponseStatus values", s)
}

// APIResponseStatusValues returns all values of the enum
func APIResponseStatusValues() []APIResponseStatus {
	return _APIResponseStatusValues
}

// IsAAPIResponseStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i APIResponseStatus) IsAAPIResponseStatus() bool {
	for _, v := range _APIResponseStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for APIResponseStatus
func (i APIResponseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for APIResponseStatus
func (i *APIResponseStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("APIResponseStatus should be a string, got %s", data)
	}

	var err error
	*i, err = APIResponseStatusString(s)
	return err
}
